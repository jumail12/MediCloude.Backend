// <auto-generated />
using System;
using AuthService.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250314053232_verifyIdentity table intail test 1")]
    partial class verifyIdentitytableintailtest1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("Created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doctor_name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Field_experience")
                        .HasColumnType("double precision");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("Is_approved")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_blocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Medical_license_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<Guid>("Specialization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Patient_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("Is_blocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patient_name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Patient_id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Specialization_doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Updated_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_on")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.VerifyIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Expire_time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Otp")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VerifyIdentitys");
                });
#pragma warning restore 612, 618
        }
    }
}
